plugins {
    id 'java-library'
    id 'maven-publish'
}

version = project.mod_version
group = 'com.tom5454.gwt-completablefuture' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'gwt-completablefuture'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
	implementation 'org.gwtproject:gwt-user:2.10.0'
}

sourceSets {
    superSource {
        java {
            srcDir 'src/super/java'
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "tom5454",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "tom5454",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
    // Include all main sources (compiled and source files)
    from sourceSets.main.allJava

    // Include super-source .java files as resources in com/tom/javazip/emul
    from(sourceSets.superSource.allJava) {
        include '**/*.java'
        into 'com/ekotrope/gwt/emul'
    }
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy jar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
		def mavenURL = System.getProperty("mavenDir")
		if ("${mavenURL}" != "null") {
			maven {
				url = file(mavenURL)
			}
		}
	}
}